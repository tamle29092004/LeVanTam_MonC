#include <iostream>
using namespace std;

const int SIZE = 3; // Size of the square

bool isLoShuMagicSquare(int square[][SIZE])
{
    bool encountered[9] = {false}; // To keep track of encountered numbers
    int expectedSum = (SIZE * (SIZE * SIZE + 1)) / 2;

    // Check if all numbers from 1 to 9 are present exactly once
    for (int i = 0; i < SIZE; i++)
    {
        for (int j = 0; j < SIZE; j++)
        {
            int num = square[i][j];
            if (num < 1 || num > 9 || encountered[num - 1])
            {
                return false; // Number is out of range or repeated
            }
            encountered[num - 1] = true;
        }
    }

    // Check rows, columns, and diagonals for the expected sum
    for (int i = 0; i < SIZE; i++)
    {
        int rowSum = 0;
        int colSum = 0;
        for (int j = 0; j < SIZE; j++)
        {
            rowSum += square[i][j];
            colSum += square[j][i];
        }
        if (rowSum != expectedSum || colSum != expectedSum)
        {
            return false; // Row or column sum doesn't match
        }
    }

    // Check the main diagonal
    int mainDiagonalSum = 0;
    for (int i = 0; i < SIZE; i++)
    {
        mainDiagonalSum += square[i][i];
    }
    if (mainDiagonalSum != expectedSum)
    {
        return false; // Main diagonal sum doesn't match
    }

    // Check the secondary diagonal
    int secondaryDiagonalSum = 0;
    for (int i = 0; i < SIZE; i++)
    {
        secondaryDiagonalSum += square[i][SIZE - 1 - i];
    }
    if (secondaryDiagonalSum != expectedSum)
    {
        return false; // Secondary diagonal sum doesn't match
    }

    return true; // All checks passed; it's a Lo Shu Magic Square
}

int main()
{
    int square[SIZE][SIZE] = {
        {4, 9, 2},
        {3, 5, 7},
        {8, 1, 6}};

    if (isLoShuMagicSquare(square))
    {
        cout << "The given square is a Lo Shu Magic Square." << endl;
    }
    else
    {
        cout << "The given square is not a Lo Shu Magic Square." << endl;
    }

    return 0;
}
